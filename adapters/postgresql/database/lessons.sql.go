// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: lessons.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLesson = `-- name: CreateLesson :exec

INSERT INTO lessons (id, module_id, title, overview, content, video_id, duration, order_index, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())
`

type CreateLessonParams struct {
	ID         string      `json:"id"`
	ModuleID   string      `json:"module_id"`
	Title      string      `json:"title"`
	Overview   pgtype.Text `json:"overview"`
	Content    pgtype.Text `json:"content"`
	VideoID    pgtype.Text `json:"video_id"`
	Duration   int32       `json:"duration"`
	OrderIndex int32       `json:"order_index"`
}

// Lesson queries
func (q *Queries) CreateLesson(ctx context.Context, arg CreateLessonParams) error {
	_, err := q.db.Exec(ctx, createLesson,
		arg.ID,
		arg.ModuleID,
		arg.Title,
		arg.Overview,
		arg.Content,
		arg.VideoID,
		arg.Duration,
		arg.OrderIndex,
	)
	return err
}

const deleteLesson = `-- name: DeleteLesson :exec
DELETE FROM lessons WHERE id = $1
`

func (q *Queries) DeleteLesson(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteLesson, id)
	return err
}

const getLessonByID = `-- name: GetLessonByID :one
SELECT id, module_id, title, overview, content, video_id, duration, order_index, created_at, updated_at
FROM lessons
WHERE id = $1
`

func (q *Queries) GetLessonByID(ctx context.Context, id string) (Lesson, error) {
	row := q.db.QueryRow(ctx, getLessonByID, id)
	var i Lesson
	err := row.Scan(
		&i.ID,
		&i.ModuleID,
		&i.Title,
		&i.Overview,
		&i.Content,
		&i.VideoID,
		&i.Duration,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLessonsByModuleID = `-- name: GetLessonsByModuleID :many
SELECT id, module_id, title, overview, content, video_id, duration, order_index, created_at, updated_at
FROM lessons
WHERE module_id = $1
ORDER BY order_index ASC
`

func (q *Queries) GetLessonsByModuleID(ctx context.Context, moduleID string) ([]Lesson, error) {
	rows, err := q.db.Query(ctx, getLessonsByModuleID, moduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lesson{}
	for rows.Next() {
		var i Lesson
		if err := rows.Scan(
			&i.ID,
			&i.ModuleID,
			&i.Title,
			&i.Overview,
			&i.Content,
			&i.VideoID,
			&i.Duration,
			&i.OrderIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lessonExists = `-- name: LessonExists :one
SELECT EXISTS(SELECT 1 FROM lessons WHERE id = $1)
`

func (q *Queries) LessonExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, lessonExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateLesson = `-- name: UpdateLesson :exec
UPDATE lessons
SET title = $2,
    overview = $3,
    content = $4,
    video_id = $5,
    duration = $6,
    order_index = $7,
    updated_at = NOW()
WHERE id = $1
`

type UpdateLessonParams struct {
	ID         string      `json:"id"`
	Title      string      `json:"title"`
	Overview   pgtype.Text `json:"overview"`
	Content    pgtype.Text `json:"content"`
	VideoID    pgtype.Text `json:"video_id"`
	Duration   int32       `json:"duration"`
	OrderIndex int32       `json:"order_index"`
}

func (q *Queries) UpdateLesson(ctx context.Context, arg UpdateLessonParams) error {
	_, err := q.db.Exec(ctx, updateLesson,
		arg.ID,
		arg.Title,
		arg.Overview,
		arg.Content,
		arg.VideoID,
		arg.Duration,
		arg.OrderIndex,
	)
	return err
}

const updateLessonOrder = `-- name: UpdateLessonOrder :exec
UPDATE lessons
SET order_index = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateLessonOrderParams struct {
	ID         string `json:"id"`
	OrderIndex int32  `json:"order_index"`
}

func (q *Queries) UpdateLessonOrder(ctx context.Context, arg UpdateLessonOrderParams) error {
	_, err := q.db.Exec(ctx, updateLessonOrder, arg.ID, arg.OrderIndex)
	return err
}
