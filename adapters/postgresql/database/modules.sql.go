// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: modules.sql

package database

import (
	"context"
)

const createModule = `-- name: CreateModule :exec

INSERT INTO modules (id, course_id, title, order_index, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
`

type CreateModuleParams struct {
	ID         string `json:"id"`
	CourseID   string `json:"course_id"`
	Title      string `json:"title"`
	OrderIndex int32  `json:"order_index"`
}

// Module queries
func (q *Queries) CreateModule(ctx context.Context, arg CreateModuleParams) error {
	_, err := q.db.Exec(ctx, createModule,
		arg.ID,
		arg.CourseID,
		arg.Title,
		arg.OrderIndex,
	)
	return err
}

const deleteModule = `-- name: DeleteModule :exec
DELETE FROM modules WHERE id = $1
`

func (q *Queries) DeleteModule(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteModule, id)
	return err
}

const getModuleByID = `-- name: GetModuleByID :one
SELECT id, course_id, title, order_index, created_at, updated_at
FROM modules
WHERE id = $1
`

func (q *Queries) GetModuleByID(ctx context.Context, id string) (Module, error) {
	row := q.db.QueryRow(ctx, getModuleByID, id)
	var i Module
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Title,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getModulesByCourseID = `-- name: GetModulesByCourseID :many
SELECT id, course_id, title, order_index, created_at, updated_at
FROM modules
WHERE course_id = $1
ORDER BY order_index ASC
`

func (q *Queries) GetModulesByCourseID(ctx context.Context, courseID string) ([]Module, error) {
	rows, err := q.db.Query(ctx, getModulesByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Module{}
	for rows.Next() {
		var i Module
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Title,
			&i.OrderIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moduleExists = `-- name: ModuleExists :one
SELECT EXISTS(SELECT 1 FROM modules WHERE id = $1)
`

func (q *Queries) ModuleExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, moduleExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateModule = `-- name: UpdateModule :exec
UPDATE modules
SET title = $2,
    order_index = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateModuleParams struct {
	ID         string `json:"id"`
	Title      string `json:"title"`
	OrderIndex int32  `json:"order_index"`
}

func (q *Queries) UpdateModule(ctx context.Context, arg UpdateModuleParams) error {
	_, err := q.db.Exec(ctx, updateModule, arg.ID, arg.Title, arg.OrderIndex)
	return err
}

const updateModuleOrder = `-- name: UpdateModuleOrder :exec
UPDATE modules
SET order_index = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateModuleOrderParams struct {
	ID         string `json:"id"`
	OrderIndex int32  `json:"order_index"`
}

func (q *Queries) UpdateModuleOrder(ctx context.Context, arg UpdateModuleOrderParams) error {
	_, err := q.db.Exec(ctx, updateModuleOrder, arg.ID, arg.OrderIndex)
	return err
}
