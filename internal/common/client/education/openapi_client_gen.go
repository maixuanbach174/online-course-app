// Package education provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package education

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCourses request
	GetCourses(ctx context.Context, params *GetCoursesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCourseWithBody request with any body
	CreateCourseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCourse(ctx context.Context, body CreateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCourse request
	DeleteCourse(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCourseById request
	GetCourseById(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCourseWithBody request with any body
	UpdateCourseWithBody(ctx context.Context, courseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCourse(ctx context.Context, courseId string, body UpdateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoursesByTeacher request
	GetCoursesByTeacher(ctx context.Context, teacherId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCourses(ctx context.Context, params *GetCoursesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoursesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCourseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCourseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCourse(ctx context.Context, body CreateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCourseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCourse(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCourseRequest(c.Server, courseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCourseById(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCourseByIdRequest(c.Server, courseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCourseWithBody(ctx context.Context, courseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCourseRequestWithBody(c.Server, courseId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCourse(ctx context.Context, courseId string, body UpdateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCourseRequest(c.Server, courseId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoursesByTeacher(ctx context.Context, teacherId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoursesByTeacherRequest(c.Server, teacherId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCoursesRequest generates requests for GetCourses
func NewGetCoursesRequest(server string, params *GetCoursesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/courses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Domain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain", runtime.ParamLocationQuery, *params.Domain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCourseRequest calls the generic CreateCourse builder with application/json body
func NewCreateCourseRequest(server string, body CreateCourseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCourseRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCourseRequestWithBody generates requests for CreateCourse with any type of body
func NewCreateCourseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/courses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCourseRequest generates requests for DeleteCourse
func NewDeleteCourseRequest(server string, courseId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "courseId", runtime.ParamLocationPath, courseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/courses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCourseByIdRequest generates requests for GetCourseById
func NewGetCourseByIdRequest(server string, courseId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "courseId", runtime.ParamLocationPath, courseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/courses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCourseRequest calls the generic UpdateCourse builder with application/json body
func NewUpdateCourseRequest(server string, courseId string, body UpdateCourseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCourseRequestWithBody(server, courseId, "application/json", bodyReader)
}

// NewUpdateCourseRequestWithBody generates requests for UpdateCourse with any type of body
func NewUpdateCourseRequestWithBody(server string, courseId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "courseId", runtime.ParamLocationPath, courseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/courses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCoursesByTeacherRequest generates requests for GetCoursesByTeacher
func NewGetCoursesByTeacherRequest(server string, teacherId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teacherId", runtime.ParamLocationPath, teacherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teachers/%s/courses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCoursesWithResponse request
	GetCoursesWithResponse(ctx context.Context, params *GetCoursesParams, reqEditors ...RequestEditorFn) (*GetCoursesResponse, error)

	// CreateCourseWithBodyWithResponse request with any body
	CreateCourseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCourseResponse, error)

	CreateCourseWithResponse(ctx context.Context, body CreateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCourseResponse, error)

	// DeleteCourseWithResponse request
	DeleteCourseWithResponse(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*DeleteCourseResponse, error)

	// GetCourseByIdWithResponse request
	GetCourseByIdWithResponse(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*GetCourseByIdResponse, error)

	// UpdateCourseWithBodyWithResponse request with any body
	UpdateCourseWithBodyWithResponse(ctx context.Context, courseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCourseResponse, error)

	UpdateCourseWithResponse(ctx context.Context, courseId string, body UpdateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCourseResponse, error)

	// GetCoursesByTeacherWithResponse request
	GetCoursesByTeacherWithResponse(ctx context.Context, teacherId string, reqEditors ...RequestEditorFn) (*GetCoursesByTeacherResponse, error)
}

type GetCoursesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Course
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCoursesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoursesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCourseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Course
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateCourseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCourseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCourseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCourseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCourseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCourseByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Course
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCourseByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCourseByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCourseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Course
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateCourseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCourseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoursesByTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Course
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCoursesByTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoursesByTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCoursesWithResponse request returning *GetCoursesResponse
func (c *ClientWithResponses) GetCoursesWithResponse(ctx context.Context, params *GetCoursesParams, reqEditors ...RequestEditorFn) (*GetCoursesResponse, error) {
	rsp, err := c.GetCourses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoursesResponse(rsp)
}

// CreateCourseWithBodyWithResponse request with arbitrary body returning *CreateCourseResponse
func (c *ClientWithResponses) CreateCourseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCourseResponse, error) {
	rsp, err := c.CreateCourseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCourseResponse(rsp)
}

func (c *ClientWithResponses) CreateCourseWithResponse(ctx context.Context, body CreateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCourseResponse, error) {
	rsp, err := c.CreateCourse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCourseResponse(rsp)
}

// DeleteCourseWithResponse request returning *DeleteCourseResponse
func (c *ClientWithResponses) DeleteCourseWithResponse(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*DeleteCourseResponse, error) {
	rsp, err := c.DeleteCourse(ctx, courseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCourseResponse(rsp)
}

// GetCourseByIdWithResponse request returning *GetCourseByIdResponse
func (c *ClientWithResponses) GetCourseByIdWithResponse(ctx context.Context, courseId string, reqEditors ...RequestEditorFn) (*GetCourseByIdResponse, error) {
	rsp, err := c.GetCourseById(ctx, courseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCourseByIdResponse(rsp)
}

// UpdateCourseWithBodyWithResponse request with arbitrary body returning *UpdateCourseResponse
func (c *ClientWithResponses) UpdateCourseWithBodyWithResponse(ctx context.Context, courseId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCourseResponse, error) {
	rsp, err := c.UpdateCourseWithBody(ctx, courseId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCourseResponse(rsp)
}

func (c *ClientWithResponses) UpdateCourseWithResponse(ctx context.Context, courseId string, body UpdateCourseJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCourseResponse, error) {
	rsp, err := c.UpdateCourse(ctx, courseId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCourseResponse(rsp)
}

// GetCoursesByTeacherWithResponse request returning *GetCoursesByTeacherResponse
func (c *ClientWithResponses) GetCoursesByTeacherWithResponse(ctx context.Context, teacherId string, reqEditors ...RequestEditorFn) (*GetCoursesByTeacherResponse, error) {
	rsp, err := c.GetCoursesByTeacher(ctx, teacherId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoursesByTeacherResponse(rsp)
}

// ParseGetCoursesResponse parses an HTTP response from a GetCoursesWithResponse call
func ParseGetCoursesResponse(rsp *http.Response) (*GetCoursesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoursesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Course
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateCourseResponse parses an HTTP response from a CreateCourseWithResponse call
func ParseCreateCourseResponse(rsp *http.Response) (*CreateCourseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCourseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Course
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCourseResponse parses an HTTP response from a DeleteCourseWithResponse call
func ParseDeleteCourseResponse(rsp *http.Response) (*DeleteCourseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCourseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCourseByIdResponse parses an HTTP response from a GetCourseByIdWithResponse call
func ParseGetCourseByIdResponse(rsp *http.Response) (*GetCourseByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCourseByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Course
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCourseResponse parses an HTTP response from a UpdateCourseWithResponse call
func ParseUpdateCourseResponse(rsp *http.Response) (*UpdateCourseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCourseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Course
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCoursesByTeacherResponse parses an HTTP response from a GetCoursesByTeacherWithResponse call
func ParseGetCoursesByTeacherResponse(rsp *http.Response) (*GetCoursesByTeacherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoursesByTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Course
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
