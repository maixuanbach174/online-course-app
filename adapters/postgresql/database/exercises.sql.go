// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: exercises.sql

package database

import (
	"context"
)

const createExercise = `-- name: CreateExercise :exec

INSERT INTO exercises (id, lesson_id, question, answers, correct_answer, order_index, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
`

type CreateExerciseParams struct {
	ID            string   `json:"id"`
	LessonID      string   `json:"lesson_id"`
	Question      string   `json:"question"`
	Answers       []string `json:"answers"`
	CorrectAnswer string   `json:"correct_answer"`
	OrderIndex    int32    `json:"order_index"`
}

// Exercise queries
func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) error {
	_, err := q.db.Exec(ctx, createExercise,
		arg.ID,
		arg.LessonID,
		arg.Question,
		arg.Answers,
		arg.CorrectAnswer,
		arg.OrderIndex,
	)
	return err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercises WHERE id = $1
`

func (q *Queries) DeleteExercise(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteExercise, id)
	return err
}

const exerciseExists = `-- name: ExerciseExists :one
SELECT EXISTS(SELECT 1 FROM exercises WHERE id = $1)
`

func (q *Queries) ExerciseExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, exerciseExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getExerciseByID = `-- name: GetExerciseByID :one
SELECT id, lesson_id, question, answers, correct_answer, order_index, created_at, updated_at
FROM exercises
WHERE id = $1
`

func (q *Queries) GetExerciseByID(ctx context.Context, id string) (Exercise, error) {
	row := q.db.QueryRow(ctx, getExerciseByID, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.LessonID,
		&i.Question,
		&i.Answers,
		&i.CorrectAnswer,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExercisesByLessonID = `-- name: GetExercisesByLessonID :many
SELECT id, lesson_id, question, answers, correct_answer, order_index, created_at, updated_at
FROM exercises
WHERE lesson_id = $1
ORDER BY order_index ASC
`

func (q *Queries) GetExercisesByLessonID(ctx context.Context, lessonID string) ([]Exercise, error) {
	rows, err := q.db.Query(ctx, getExercisesByLessonID, lessonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exercise{}
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.LessonID,
			&i.Question,
			&i.Answers,
			&i.CorrectAnswer,
			&i.OrderIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :exec
UPDATE exercises
SET question = $2,
    answers = $3,
    correct_answer = $4,
    order_index = $5,
    updated_at = NOW()
WHERE id = $1
`

type UpdateExerciseParams struct {
	ID            string   `json:"id"`
	Question      string   `json:"question"`
	Answers       []string `json:"answers"`
	CorrectAnswer string   `json:"correct_answer"`
	OrderIndex    int32    `json:"order_index"`
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error {
	_, err := q.db.Exec(ctx, updateExercise,
		arg.ID,
		arg.Question,
		arg.Answers,
		arg.CorrectAnswer,
		arg.OrderIndex,
	)
	return err
}

const updateExerciseOrder = `-- name: UpdateExerciseOrder :exec
UPDATE exercises
SET order_index = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateExerciseOrderParams struct {
	ID         string `json:"id"`
	OrderIndex int32  `json:"order_index"`
}

func (q *Queries) UpdateExerciseOrder(ctx context.Context, arg UpdateExerciseOrderParams) error {
	_, err := q.db.Exec(ctx, updateExerciseOrder, arg.ID, arg.OrderIndex)
	return err
}
