// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: enrollments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEnrollment = `-- name: CreateEnrollment :exec
INSERT INTO enrollments (id, user_id, course_id, enrolled_at, started_at, completed_at, course_progress_percentage, course_progress_status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())
`

type CreateEnrollmentParams struct {
	ID                       string           `json:"id"`
	UserID                   string           `json:"user_id"`
	CourseID                 string           `json:"course_id"`
	EnrolledAt               pgtype.Timestamp `json:"enrolled_at"`
	StartedAt                pgtype.Timestamp `json:"started_at"`
	CompletedAt              pgtype.Timestamp `json:"completed_at"`
	CourseProgressPercentage pgtype.Numeric   `json:"course_progress_percentage"`
	CourseProgressStatus     string           `json:"course_progress_status"`
}

func (q *Queries) CreateEnrollment(ctx context.Context, arg CreateEnrollmentParams) error {
	_, err := q.db.Exec(ctx, createEnrollment,
		arg.ID,
		arg.UserID,
		arg.CourseID,
		arg.EnrolledAt,
		arg.StartedAt,
		arg.CompletedAt,
		arg.CourseProgressPercentage,
		arg.CourseProgressStatus,
	)
	return err
}

const createLessonProgress = `-- name: CreateLessonProgress :exec
INSERT INTO lesson_progress (enrollment_id, lesson_id, progress_percentage, progress_status, exercise_score, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
`

type CreateLessonProgressParams struct {
	EnrollmentID       string         `json:"enrollment_id"`
	LessonID           string         `json:"lesson_id"`
	ProgressPercentage pgtype.Numeric `json:"progress_percentage"`
	ProgressStatus     string         `json:"progress_status"`
	ExerciseScore      pgtype.Numeric `json:"exercise_score"`
}

func (q *Queries) CreateLessonProgress(ctx context.Context, arg CreateLessonProgressParams) error {
	_, err := q.db.Exec(ctx, createLessonProgress,
		arg.EnrollmentID,
		arg.LessonID,
		arg.ProgressPercentage,
		arg.ProgressStatus,
		arg.ExerciseScore,
	)
	return err
}

const createModuleProgress = `-- name: CreateModuleProgress :exec
INSERT INTO module_progress (enrollment_id, module_id, progress_percentage, progress_status, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
`

type CreateModuleProgressParams struct {
	EnrollmentID       string         `json:"enrollment_id"`
	ModuleID           string         `json:"module_id"`
	ProgressPercentage pgtype.Numeric `json:"progress_percentage"`
	ProgressStatus     string         `json:"progress_status"`
}

func (q *Queries) CreateModuleProgress(ctx context.Context, arg CreateModuleProgressParams) error {
	_, err := q.db.Exec(ctx, createModuleProgress,
		arg.EnrollmentID,
		arg.ModuleID,
		arg.ProgressPercentage,
		arg.ProgressStatus,
	)
	return err
}

const deleteEnrollment = `-- name: DeleteEnrollment :exec
DELETE FROM enrollments WHERE id = $1
`

func (q *Queries) DeleteEnrollment(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteEnrollment, id)
	return err
}

const deleteLessonProgressByEnrollmentID = `-- name: DeleteLessonProgressByEnrollmentID :exec
DELETE FROM lesson_progress WHERE enrollment_id = $1
`

func (q *Queries) DeleteLessonProgressByEnrollmentID(ctx context.Context, enrollmentID string) error {
	_, err := q.db.Exec(ctx, deleteLessonProgressByEnrollmentID, enrollmentID)
	return err
}

const deleteModuleProgressByEnrollmentID = `-- name: DeleteModuleProgressByEnrollmentID :exec
DELETE FROM module_progress WHERE enrollment_id = $1
`

func (q *Queries) DeleteModuleProgressByEnrollmentID(ctx context.Context, enrollmentID string) error {
	_, err := q.db.Exec(ctx, deleteModuleProgressByEnrollmentID, enrollmentID)
	return err
}

const getAllEnrollments = `-- name: GetAllEnrollments :many
SELECT id, user_id, course_id, enrolled_at, started_at, completed_at, course_progress_percentage, course_progress_status, created_at, updated_at
FROM enrollments
ORDER BY enrolled_at DESC
`

func (q *Queries) GetAllEnrollments(ctx context.Context) ([]Enrollment, error) {
	rows, err := q.db.Query(ctx, getAllEnrollments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Enrollment{}
	for rows.Next() {
		var i Enrollment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CourseID,
			&i.EnrolledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.CourseProgressPercentage,
			&i.CourseProgressStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnrollmentByID = `-- name: GetEnrollmentByID :one
SELECT id, user_id, course_id, enrolled_at, started_at, completed_at, course_progress_percentage, course_progress_status, created_at, updated_at
FROM enrollments
WHERE id = $1
`

func (q *Queries) GetEnrollmentByID(ctx context.Context, id string) (Enrollment, error) {
	row := q.db.QueryRow(ctx, getEnrollmentByID, id)
	var i Enrollment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CourseID,
		&i.EnrolledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CourseProgressPercentage,
		&i.CourseProgressStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEnrollmentByUserAndCourse = `-- name: GetEnrollmentByUserAndCourse :one
SELECT id, user_id, course_id, enrolled_at, started_at, completed_at, course_progress_percentage, course_progress_status, created_at, updated_at
FROM enrollments
WHERE user_id = $1 AND course_id = $2
`

type GetEnrollmentByUserAndCourseParams struct {
	UserID   string `json:"user_id"`
	CourseID string `json:"course_id"`
}

func (q *Queries) GetEnrollmentByUserAndCourse(ctx context.Context, arg GetEnrollmentByUserAndCourseParams) (Enrollment, error) {
	row := q.db.QueryRow(ctx, getEnrollmentByUserAndCourse, arg.UserID, arg.CourseID)
	var i Enrollment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CourseID,
		&i.EnrolledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CourseProgressPercentage,
		&i.CourseProgressStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEnrollmentsByUserID = `-- name: GetEnrollmentsByUserID :many
SELECT id, user_id, course_id, enrolled_at, started_at, completed_at, course_progress_percentage, course_progress_status, created_at, updated_at
FROM enrollments
WHERE user_id = $1
ORDER BY enrolled_at DESC
`

func (q *Queries) GetEnrollmentsByUserID(ctx context.Context, userID string) ([]Enrollment, error) {
	rows, err := q.db.Query(ctx, getEnrollmentsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Enrollment{}
	for rows.Next() {
		var i Enrollment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CourseID,
			&i.EnrolledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.CourseProgressPercentage,
			&i.CourseProgressStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLessonProgressByEnrollmentID = `-- name: GetLessonProgressByEnrollmentID :many
SELECT enrollment_id, lesson_id, progress_percentage, progress_status, exercise_score, created_at, updated_at
FROM lesson_progress
WHERE enrollment_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetLessonProgressByEnrollmentID(ctx context.Context, enrollmentID string) ([]LessonProgress, error) {
	rows, err := q.db.Query(ctx, getLessonProgressByEnrollmentID, enrollmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LessonProgress{}
	for rows.Next() {
		var i LessonProgress
		if err := rows.Scan(
			&i.EnrollmentID,
			&i.LessonID,
			&i.ProgressPercentage,
			&i.ProgressStatus,
			&i.ExerciseScore,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModuleProgressByEnrollmentID = `-- name: GetModuleProgressByEnrollmentID :many
SELECT enrollment_id, module_id, progress_percentage, progress_status, created_at, updated_at
FROM module_progress
WHERE enrollment_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetModuleProgressByEnrollmentID(ctx context.Context, enrollmentID string) ([]ModuleProgress, error) {
	rows, err := q.db.Query(ctx, getModuleProgressByEnrollmentID, enrollmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ModuleProgress{}
	for rows.Next() {
		var i ModuleProgress
		if err := rows.Scan(
			&i.EnrollmentID,
			&i.ModuleID,
			&i.ProgressPercentage,
			&i.ProgressStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnrollment = `-- name: UpdateEnrollment :exec
UPDATE enrollments
SET user_id = $2,
    course_id = $3,
    enrolled_at = $4,
    started_at = $5,
    completed_at = $6,
    course_progress_percentage = $7,
    course_progress_status = $8,
    updated_at = NOW()
WHERE id = $1
`

type UpdateEnrollmentParams struct {
	ID                       string           `json:"id"`
	UserID                   string           `json:"user_id"`
	CourseID                 string           `json:"course_id"`
	EnrolledAt               pgtype.Timestamp `json:"enrolled_at"`
	StartedAt                pgtype.Timestamp `json:"started_at"`
	CompletedAt              pgtype.Timestamp `json:"completed_at"`
	CourseProgressPercentage pgtype.Numeric   `json:"course_progress_percentage"`
	CourseProgressStatus     string           `json:"course_progress_status"`
}

func (q *Queries) UpdateEnrollment(ctx context.Context, arg UpdateEnrollmentParams) error {
	_, err := q.db.Exec(ctx, updateEnrollment,
		arg.ID,
		arg.UserID,
		arg.CourseID,
		arg.EnrolledAt,
		arg.StartedAt,
		arg.CompletedAt,
		arg.CourseProgressPercentage,
		arg.CourseProgressStatus,
	)
	return err
}

const updateLessonProgress = `-- name: UpdateLessonProgress :exec
UPDATE lesson_progress
SET progress_percentage = $3,
    progress_status = $4,
    exercise_score = $5,
    updated_at = NOW()
WHERE enrollment_id = $1 AND lesson_id = $2
`

type UpdateLessonProgressParams struct {
	EnrollmentID       string         `json:"enrollment_id"`
	LessonID           string         `json:"lesson_id"`
	ProgressPercentage pgtype.Numeric `json:"progress_percentage"`
	ProgressStatus     string         `json:"progress_status"`
	ExerciseScore      pgtype.Numeric `json:"exercise_score"`
}

func (q *Queries) UpdateLessonProgress(ctx context.Context, arg UpdateLessonProgressParams) error {
	_, err := q.db.Exec(ctx, updateLessonProgress,
		arg.EnrollmentID,
		arg.LessonID,
		arg.ProgressPercentage,
		arg.ProgressStatus,
		arg.ExerciseScore,
	)
	return err
}

const updateModuleProgress = `-- name: UpdateModuleProgress :exec
UPDATE module_progress
SET progress_percentage = $3,
    progress_status = $4,
    updated_at = NOW()
WHERE enrollment_id = $1 AND module_id = $2
`

type UpdateModuleProgressParams struct {
	EnrollmentID       string         `json:"enrollment_id"`
	ModuleID           string         `json:"module_id"`
	ProgressPercentage pgtype.Numeric `json:"progress_percentage"`
	ProgressStatus     string         `json:"progress_status"`
}

func (q *Queries) UpdateModuleProgress(ctx context.Context, arg UpdateModuleProgressParams) error {
	_, err := q.db.Exec(ctx, updateModuleProgress,
		arg.EnrollmentID,
		arg.ModuleID,
		arg.ProgressPercentage,
		arg.ProgressStatus,
	)
	return err
}
