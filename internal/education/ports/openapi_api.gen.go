// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all courses
	// (GET /courses)
	GetCourses(w http.ResponseWriter, r *http.Request, params GetCoursesParams)
	// Create a new course
	// (POST /courses)
	CreateCourse(w http.ResponseWriter, r *http.Request)
	// Delete a course
	// (DELETE /courses/{courseId})
	DeleteCourse(w http.ResponseWriter, r *http.Request, courseId string)
	// Get course details
	// (GET /courses/{courseId})
	GetCourseById(w http.ResponseWriter, r *http.Request, courseId string)
	// Update a course
	// (PUT /courses/{courseId})
	UpdateCourse(w http.ResponseWriter, r *http.Request, courseId string)
	// Get courses by teacher
	// (GET /teachers/{teacherId}/courses)
	GetCoursesByTeacher(w http.ResponseWriter, r *http.Request, teacherId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all courses
// (GET /courses)
func (_ Unimplemented) GetCourses(w http.ResponseWriter, r *http.Request, params GetCoursesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new course
// (POST /courses)
func (_ Unimplemented) CreateCourse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a course
// (DELETE /courses/{courseId})
func (_ Unimplemented) DeleteCourse(w http.ResponseWriter, r *http.Request, courseId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get course details
// (GET /courses/{courseId})
func (_ Unimplemented) GetCourseById(w http.ResponseWriter, r *http.Request, courseId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a course
// (PUT /courses/{courseId})
func (_ Unimplemented) UpdateCourse(w http.ResponseWriter, r *http.Request, courseId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get courses by teacher
// (GET /teachers/{teacherId}/courses)
func (_ Unimplemented) GetCoursesByTeacher(w http.ResponseWriter, r *http.Request, teacherId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCourses operation middleware
func (siw *ServerInterfaceWrapper) GetCourses(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoursesParams

	// ------------- Optional query parameter "domain" -------------

	err = runtime.BindQueryParameter("form", true, false, "domain", r.URL.Query(), &params.Domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	// ------------- Optional query parameter "level" -------------

	err = runtime.BindQueryParameter("form", true, false, "level", r.URL.Query(), &params.Level)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "level", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCourse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCourse operation middleware
func (siw *ServerInterfaceWrapper) DeleteCourse(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", chi.URLParam(r, "courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCourse(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCourseById operation middleware
func (siw *ServerInterfaceWrapper) GetCourseById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", chi.URLParam(r, "courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourseById(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCourse operation middleware
func (siw *ServerInterfaceWrapper) UpdateCourse(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", chi.URLParam(r, "courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCourse(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCoursesByTeacher operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesByTeacher(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teacherId" -------------
	var teacherId string

	err = runtime.BindStyledParameterWithOptions("simple", "teacherId", chi.URLParam(r, "teacherId"), &teacherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teacherId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoursesByTeacher(w, r, teacherId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses", wrapper.GetCourses)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/courses", wrapper.CreateCourse)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/courses/{courseId}", wrapper.DeleteCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}", wrapper.GetCourseById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/courses/{courseId}", wrapper.UpdateCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teachers/{teacherId}/courses", wrapper.GetCoursesByTeacher)
	})

	return r
}
