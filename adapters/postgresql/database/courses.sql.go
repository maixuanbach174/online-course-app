// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: courses.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const courseExists = `-- name: CourseExists :one
SELECT EXISTS(SELECT 1 FROM courses WHERE id = $1)
`

func (q *Queries) CourseExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, courseExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCourse = `-- name: CreateCourse :exec

INSERT INTO courses (id, teacher_id, title, description, thumbnail, duration, domain, rating, level, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW())
`

type CreateCourseParams struct {
	ID          string         `json:"id"`
	TeacherID   string         `json:"teacher_id"`
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	Thumbnail   pgtype.Text    `json:"thumbnail"`
	Duration    int32          `json:"duration"`
	Domain      string         `json:"domain"`
	Rating      pgtype.Numeric `json:"rating"`
	Level       string         `json:"level"`
}

// Course queries
func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) error {
	_, err := q.db.Exec(ctx, createCourse,
		arg.ID,
		arg.TeacherID,
		arg.Title,
		arg.Description,
		arg.Thumbnail,
		arg.Duration,
		arg.Domain,
		arg.Rating,
		arg.Level,
	)
	return err
}

const createCourseTag = `-- name: CreateCourseTag :exec

INSERT INTO course_tags (course_id, tag)
VALUES ($1, $2)
ON CONFLICT (course_id, tag) DO NOTHING
`

type CreateCourseTagParams struct {
	CourseID string `json:"course_id"`
	Tag      string `json:"tag"`
}

// Course Tags queries
func (q *Queries) CreateCourseTag(ctx context.Context, arg CreateCourseTagParams) error {
	_, err := q.db.Exec(ctx, createCourseTag, arg.CourseID, arg.Tag)
	return err
}

const deleteAllCourseTags = `-- name: DeleteAllCourseTags :exec
DELETE FROM course_tags WHERE course_id = $1
`

func (q *Queries) DeleteAllCourseTags(ctx context.Context, courseID string) error {
	_, err := q.db.Exec(ctx, deleteAllCourseTags, courseID)
	return err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses WHERE id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCourse, id)
	return err
}

const deleteCourseTag = `-- name: DeleteCourseTag :exec
DELETE FROM course_tags WHERE course_id = $1 AND tag = $2
`

type DeleteCourseTagParams struct {
	CourseID string `json:"course_id"`
	Tag      string `json:"tag"`
}

func (q *Queries) DeleteCourseTag(ctx context.Context, arg DeleteCourseTagParams) error {
	_, err := q.db.Exec(ctx, deleteCourseTag, arg.CourseID, arg.Tag)
	return err
}

const getAllCourses = `-- name: GetAllCourses :many
SELECT id, teacher_id, title, description, thumbnail, duration, domain, rating, level, created_at, updated_at
FROM courses
ORDER BY created_at DESC
`

func (q *Queries) GetAllCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, getAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Title,
			&i.Description,
			&i.Thumbnail,
			&i.Duration,
			&i.Domain,
			&i.Rating,
			&i.Level,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseByID = `-- name: GetCourseByID :one
SELECT id, teacher_id, title, description, thumbnail, duration, domain, rating, level, created_at, updated_at
FROM courses
WHERE id = $1
`

func (q *Queries) GetCourseByID(ctx context.Context, id string) (Course, error) {
	row := q.db.QueryRow(ctx, getCourseByID, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Title,
		&i.Description,
		&i.Thumbnail,
		&i.Duration,
		&i.Domain,
		&i.Rating,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCourseTagsByCourseID = `-- name: GetCourseTagsByCourseID :many
SELECT tag
FROM course_tags
WHERE course_id = $1
ORDER BY tag
`

func (q *Queries) GetCourseTagsByCourseID(ctx context.Context, courseID string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCourseTagsByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoursesByTeacherID = `-- name: GetCoursesByTeacherID :many
SELECT id, teacher_id, title, description, thumbnail, duration, domain, rating, level, created_at, updated_at
FROM courses
WHERE teacher_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCoursesByTeacherID(ctx context.Context, teacherID string) ([]Course, error) {
	rows, err := q.db.Query(ctx, getCoursesByTeacherID, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Title,
			&i.Description,
			&i.Thumbnail,
			&i.Duration,
			&i.Domain,
			&i.Rating,
			&i.Level,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE courses
SET teacher_id = $2,
    title = $3,
    description = $4,
    thumbnail = $5,
    duration = $6,
    domain = $7,
    rating = $8,
    level = $9,
    updated_at = NOW()
WHERE id = $1
`

type UpdateCourseParams struct {
	ID          string         `json:"id"`
	TeacherID   string         `json:"teacher_id"`
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	Thumbnail   pgtype.Text    `json:"thumbnail"`
	Duration    int32          `json:"duration"`
	Domain      string         `json:"domain"`
	Rating      pgtype.Numeric `json:"rating"`
	Level       string         `json:"level"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.Exec(ctx, updateCourse,
		arg.ID,
		arg.TeacherID,
		arg.Title,
		arg.Description,
		arg.Thumbnail,
		arg.Duration,
		arg.Domain,
		arg.Rating,
		arg.Level,
	)
	return err
}
